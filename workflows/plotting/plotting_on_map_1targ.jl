
#Plotting op file
using PyPlot
using GeoDatasets
using JLD2

#@load "/Users/joshil/Documents/Code/global_scale_outputs/outputs_5p_v2/output_gs_study_res_run_062023_100m_5f_726_5plat_5proc_lag.jld"
#@load "/Users/joshil/Documents/Code/Outputs/output_gs_study_res_run_122023_100m_5f_4001_4plat_4proc_2.jld"
@load "/Users/joshil/Documents/Code/global_scale_outputs/ROSEL/4p_outputs_SIMO/output_gs_study_res_run_122023_100m_5f_104_4plat_3proc_lag.jld"


#img_path = "/Users/joshil/Documents/Code/global_scale_outputs/plots_5p_v2/100m_5f_726_5plat_5proc_lag/"
#img_path = "/Users/joshil/Documents/Code/Plots_4p/100m_5f_104_4plat_3proc_lag/"
img_path = "/Users/joshil/Documents/Code/global_scale_outputs/ROSEL/Plots_4p_SIMO/100m_5f_104_4plat_3proc_lag/"

#xlim_plot = (-125,-75)
#ylim_plot = (15,50)

xlim_plot = (-180,180)
ylim_plot = (-75,75)

#xlim_plot = (95,140)
#ylim_plot = (-10,15)

Lats_p                  = Geo_location.A[1,:,1]
Lons_p                  = Geo_location.A[:,1,2]

plot_v_cr               =  Canopy_heights.A[:,:,1]
plot_v_cr               = plot_v_cr[:,:,1]

plot_v_bpa_s            =  Output_stat_bpa[:,:,1]
plot_v_bpa_c            =  Output_stat_bpa[:,:,2]
plot_v_bpa_h            =  Output_stat_bpa[:,:,3]
plot_v_bpa_n            =  Output_stat_bpa[:,:,4]
plot_v_bpa_n_pslr       =  Output_stat_bpa[:,:,8]
plot_v_bpa_n_islr       =  Output_stat_bpa[:,:,12]
#plot_v_bpa_n_locerr     =  Output_stat_bpa[:,:,16]
#plot_v_bpa_n_pow        =  Output_stat_bpa[:,:,17]

plot_v_beamforming_s    =  Output_stat_beamforming[:,:,1]
plot_v_beamforming_c    =  Output_stat_beamforming[:,:,2]
plot_v_beamforming_h    =  Output_stat_beamforming[:,:,3]
plot_v_beamforming_n    =  Output_stat_beamforming[:,:,4]
plot_v_beamforming_n_pslr       =  Output_stat_beamforming[:,:,8]
plot_v_beamforming_n_islr       =  Output_stat_beamforming[:,:,12]
#plot_v_beamforming_n_locerr     =  Output_stat_beamforming[:,:,16]
#plot_v_beamforming_n_pow        =  Output_stat_beamforming[:,:,17]

plot_v_capon_s          =  Output_stat_capon[:,:,1]
plot_v_capon_c          =  Output_stat_capon[:,:,2]
plot_v_capon_h          =  Output_stat_capon[:,:,3]
plot_v_capon_n          =  Output_stat_capon[:,:,4]
plot_v_capon_n_pslr     =  Output_stat_capon[:,:,8]
plot_v_capon_n_islr     =  Output_stat_capon[:,:,12]
#plot_v_capon_n_locerr   =  Output_stat_capon[:,:,16]
#plot_v_capon_n_pow        =  Output_stat_capon[:,:,17]


plot_v_la               =  lookang_all[:,:,1]
plot_v_bprpmax          =  Perp_baseline_max[:,:,1]
plot_v_bprpmin          =  Perp_baseline_min[:,:,1]
plot_v_bparmax          =  Par_baseline_max[:,:,1]
plot_v_bparmin          =  Par_baseline_min[:,:,1]
plot_v_bnrmmax          =  Norm_baseline_max[:,:,1]
plot_v_bnrmmin          =  Norm_baseline_min[:,:,1]

theo_res_N              =  res_theory_n[:,:,1]
theo_res_S              =  res_theory_s[:,:,1]

amb_Ht                  =  amb_H[:,:,1]
amb_Nt                  =  amb_N[:,:,1]
Slnt_range              = slnt_range[:,:,1]./1000



pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_h'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
plt.clim(3,6)
#plt.clim(4,6)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - Resolution along H", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"BPA_H.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_c'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
plt.clim(4,8) #+1+1
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - Resolution along C", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"BPA_C.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_n'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
#plt.clim(5,20)
#plt.clim(2-2,10-2)
plt.clim(0,30) #+13+4
#plt.clim(4,11)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - Resolution along n", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"BPA_N_2.png")




pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_h'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
plt.clim(3,6)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming - Resolution along H", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"Beamforming_H.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_c'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
plt.clim(4,8)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming algorithm - Resolution along C", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"Beamforming_C.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_n'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
#plt.clim(5,40) #20
plt.clim(0,30)#15
#plt.clim(4+8,11+8)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming algorithm - Resolution along n", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"Beamforming_N.png")



pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_h'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
#plt.clim(1+2,3+2)
plt.clim(3,6)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON - Resolution along H", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"CAPON_H.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_c'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
#plt.clim(3+1,6+1)
plt.clim(4,8)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON algorithm - Resolution along C", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"CAPON_C.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
ii=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_n'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
plt.set_cmap("magma")
#plt.clim(0,4)
plt.clim(0,30)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON algorithm - Resolution along n", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1) # US 1.1
plt.savefig(img_path*"CAPON_N.png")



#Look angles
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_la'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[deg]]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("cividis")
plt.clim(30,42+5)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Look angle", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"LookAng.png")


#PerpBaselineMax
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bprpmax'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
#plt.clim(4,14)
plt.clim(6,12)
#plt.clim(5,20+12)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Max Perp Baseline", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"PerpBaselineMax.png")

#PerpBaselineMin
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bprpmin'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(2,8)
#plt.clim(0,10-3)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Min Perp Baseline", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"PerpBaselineMin.png")

#ParBaselineMax
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bparmax'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(13,17)
#plt.clim(0+220,2+228)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Max AT Baseline", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"ATBaselineMax.png")

#ParBaselineMin
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bparmin'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(0.0,2)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Min AT Baseline", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"ATBaselineMin.png")


#NormBaselineMax
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bnrmmax'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
#plt.clim(10,15)
plt.clim(13, 17)
#plt.clim(10, 21)
#plt.clim(220, 230)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Max Baseline", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"NormBaselineMax.png")

#NormBaselineMin
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bnrmmin'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(3,6)
#plt.clim(0,5)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Min Baseline", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"NormBaselineMin.png")


#####-- Canopy heights
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_cr[:,:,1]'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("viridis")
plt.clim(0,30)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Canopy heights", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.clim(0,5)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"CH_1.png")


pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],Canopy_heights.A[:,:,1]'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("viridis")
plt.clim(0,30)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Canopy heights", fontsize=20)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"CH_2.png")


avg_sep = (plot_v_bprpmax) ./ 3
plot_v_bprpmax2 = plot_v_bprpmax;
plot_v_bprpmax2[isnan.(plot_v_bprpmax)].=0;

theo_res_N2 =  theo_res_N .* (maximum(plot_v_bprpmax2) ./ (maximum(plot_v_bprpmax2).+avg_sep) )
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],theo_res_N2'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
#plt.clim(4,11)
#plt.clim(7,22)
#plt.clim(12,18)
plt.clim(3,15)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Theoretical resolution n", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"Theo_res_n.png")


#NormBaselineMin
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],theo_res_S'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(4, 11)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Theoretical resolution along-track", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"Theo_res_s.png")

amb_Ht[amb_Ht.==0.0].=NaN
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],amb_Ht'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(10,30)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Ambiguity along Height", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"Amb_H.png")

amb_Nt[amb_Nt.==0.0].=NaN
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],amb_Nt'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[m]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(30,50)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Ambiguity along n", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"Amb_N.png")

Slnt_range[Slnt_range.==0.0].=NaN
pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],Slnt_range'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[km]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(850,1050)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Range to target", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"Slnt_Range.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_n_islr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(0,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - ISLR along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"bpa_islr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_n_islr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,10)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming algorithm - ISLR along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"beamforming_islr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_n_islr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,10)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON algorithm - ISLR along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"capon_islr_n.png")


pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_n_pslr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - PSLR along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"bpa_pslr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_n_pslr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming algorithm - PSLR along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"beamforming_pslr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_n_pslr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON algorithm - PSLR along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"capon_pslr_n.png")








pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_n_locerr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("m", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - Loc Err along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"bpa_locerr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_n_locerr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("m", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming algorithm - Loc Err along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"beamforming_locerr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_n_locerr'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("m", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(-10,20)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON algorithm - Loc Err along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"capon_locerr_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_bpa_n_pow'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(0,300)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Back projection algorithm - Max Power along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"bpa_pow_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_beamforming_n_pow'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(0,300)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("Beamforming algorithm - Max Power along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"beamforming_pow_n.png")

pygui(true)
fig = plt.figure(figsize=(11, 6))
rr=(pcolormesh(Lons_p[:],Lats_p[:],plot_v_capon_n_pow'))
cbar = colorbar(orientation="vertical", shrink=0.70)
cbar.set_label("[dB]", size=16)
cbar.ax.tick_params(labelsize=16) 
gca().set_aspect(1)
plt.set_cmap("jet")
plt.clim(0,300)
lon,lat,data = GeoDatasets.landseamask(;resolution='c',grid=5)
pygui(true)
(PyPlot.contour(lon,lat,data',[0.5],colors=[[0.2,0.2,0.2]],linewidths=1.0))
gca().set_aspect(1)
plt.xlabel("Longitude", fontsize=18)
plt.ylabel("Latitude", fontsize=18)
plt.title("CAPON algorithm - Max Power along n ", fontsize=20)
plt.xlim(xlim_plot)
plt.ylim(ylim_plot)
plt.yticks(fontsize=16)
plt.xticks(fontsize=16)
gca().set_aspect(1.1)
plt.savefig(img_path*"capon_pow_n.png")